<!-- -*- text -*- -->
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        
        <title>Boost.Parser: A Parser Combinator Library for C++</title>
        
        <link rel="stylesheet" href="reveal.js/dist/reset.css">
        <link rel="stylesheet" href="reveal.js/dist/reveal.css">
        <link rel="stylesheet" href="reveal.js/dist/theme/black.css">
        
        <!-- Theme used for syntax highlighted code -->
        <link rel="stylesheet" href="reveal.js/plugin/highlight/monokai.css">
    </head>
    <body>
        <div class="reveal">
        <div class="slides">
            <section data-markdown=""
                     data-separator="^====+$"
                     data-separator-vertical="^----+$"
                     data-notes="^Note:">
              <script type="text/template">
## Boost.Parser: A Parser Combinator Library for C++
### Zach Laine

----

### Why a New Parser Library?

<!--
Outline from proposal:

Part 1: Justification for this library
- Comparison with Spirit 2
- Comparison with Spirit X3

Part 2: A brief orientation
- parsers
- combining operators
- attribute generation

Part 3: A deeper dive
- getting attributes out of the parse
- generated attributes
- filled-in out-param attributes
- callback parsing
- parsing into aggregate structs (incl. struct-for-tuple and tuple-for-struct
  replacements)
- parsing into arbitrary class types
- using rule parsers to concretize attribute types
- Unicode support
- Auto-generated diagnostics
- auto-generated trace
- turning ill-formed code into a runtime failure to ease debugging (this is a
  really fun technique that sounds completely wrongheaded until you see it in
  action!)

Range-y stuff:

Part 1: Overview of making a range
- the view, and the V base_ it operates on
- the range adaptor that makes the view
- all_t, and its use in deduction guides
- std::ranges::range_adaptor_closure and std::bind_back()

Part 2: all_t
- purpose is to adapt viewable_ranges to views (and not to touch views)
- ref_view
  - note ctors, base(), begin()/end(), no begin() const/end() const
- owning_view
  - note ctors, base(), begin()/end(), begin() const/end() const
- the 'all' range adaptor
  - can_ref_view

Part 3: replace/replace_view
- replace_view
  - note ctors, base(), begin()/end(), begin() const/end() const
  - replace_view::sentinel
  - replace_view::iterator
    - maybe_const
    - op++, op*
    - either_iterator, concatable
- the 'replace' range adaptor
  - R may be a viewable_range or a pointer toa null-terminated string
  - same with the replacement
  - can_replace_view
  - to_range
    - range_utf_format_v
    - as_utfN
    - is_bounded_array and null terminators

- Hard-to-understand concept error messages due to non-const either_iterator::op*().
-->

----



----

## Questions?

<span class="fragment fade-in">
https://github.com/tzlaine/parser <br>
</span>

            </script>
            </section>
        </div>
    </div>

    <script src="reveal.js/dist/reveal.js"></script>
    <script src="reveal.js/plugin/notes/notes.js"></script>
    <script src="reveal.js/plugin/markdown/markdown.js"></script>
    <script src="reveal.js/plugin/highlight/highlight.js"></script>
    <script>
        // More info about initialization & config:
        // - https://revealjs.com/initialization/
        // - https://revealjs.com/config/
        Reveal.initialize({
            slideNumber: "c/t",
            hash: true,
            // Learn about plugins: https://revealjs.com/plugins/
            plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ]
        });
    </script>
    </body>
</html>
